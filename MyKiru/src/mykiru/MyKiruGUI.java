/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
Runnable aRunnable = new Runnable(){
@Override
public void run(){

}
};
Thread th = new Thread(aRunnable);
th.start();
 */
package mykiru;

import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import javax.swing.JCheckBox;
import javax.swing.JLabel;

/**
 *
 * @author Tad
 */
public class MyKiruGUI extends javax.swing.JFrame {

    public String currentDir = new File(".").getAbsolutePath().trim().substring(0, new File(".").getAbsolutePath().trim().length() - 1);
    public Functions fs = new mykiru.Functions();
    public Settings settings = new mykiru.Settings();

//Public variables here
    public String update_files = "http://thehallo.ws/services";
    public String Title = "MyKiru 0.1";
    public String updateurl = "http://google.com";
    public String UserIcon = "icon.png";
    public boolean Pause;
    public boolean Cancel;
    public boolean Skip_Version_Check = false;
    public boolean Close = false;

    /**
     * Creates new form MyKiruGUI
     */
    public MyKiruGUI() {
        loadConfig();
        initComponents();
        try {
            //this.setIconImage(new ImageIcon(getClass().getResource(UserIcon)).getImage());
            this.setIconImage(fs.createImageIcon(UserIcon, "").getImage());
        } catch (Exception x) {
            fs.w(fs.find_message("failedtoloadicon", lang(), "{User_Icon}", UserIcon), text);
        }
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
    }

    private Runnable loadFeed() {
        Runnable aRunnable = new Runnable() {
            @Override
            public void run() {
                try {
                    feed.setPage(updateurl);
                } catch (IOException ex) {
                    fs.w(fs.find_message("failed_to_load_newsfeed", lang(), "{Error_Message}", ex.toString()), text);
                    feed.setText(fs.find_message("failed_to_load_newsfeed", lang(), "{Error_Message}", ex.toString()));
                }
            }
        };
        Thread th = new Thread(aRunnable);
        th.start();
        return th;
    }

    private String lang() {
        return fs.lang();
    }

    private void loadConfig() {
        String path = currentDir + "bin\\config.xml";
        File f = new File(path);
        if (f.exists()) {
            try {
                String cf = fs.readFileAsString(path);
                Title = fs.findsetting("title", cf);
                updateurl = fs.findsetting("feedurl", cf);
                update_files = fs.findsetting("updateurl", cf);
                if ("".equals(settings.UO_DIR.getText())) {
                    settings.UO_DIR.setText(fs.findsetting("DefaultUODir", cf));
                }
                if ("false".equals(fs.findsetting("razor", cf))) {
                    settings.Razor.setVisible(false);
                }
                if ("false".equals(fs.findsetting("assistuo", cf))) {
                    settings.AssistUO.setVisible(false);
                }
                UserIcon = currentDir + "bin\\" + fs.findsetting("usericon", cf);
            } catch (Exception ex) {
                fs.w(fs.find_message("error_reading_config", lang(), "{Error_Message}", ex.toString()), text);
            }
        }

        this.setTitle(Title);
        settings.settitle(Title);
    }

    public void OpenKiru() {
        try {
            URI url = new URI("http://uokiru.com");
            try {
                Desktop.getDesktop().browse(url);
            } catch (IOException ex) {
                fs.w(fs.find_message("failed_to_load_browser", lang(), "{Error_Message}", ex.toString()), text);
            }
        } catch (URISyntaxException ex) {

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Paused = new javax.swing.JCheckBox();
        Canceled = new javax.swing.JCheckBox();
        update = new javax.swing.JButton();
        fullclient = new javax.swing.JButton();
        main_progress = new javax.swing.JProgressBar();
        sub_progress = new javax.swing.JProgressBar();
        jScrollPane2 = new javax.swing.JScrollPane();
        feed = new javax.swing.JEditorPane();
        DL_speed = new javax.swing.JLabel();
        DL_current = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        text = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        KIRU_VERSION = new javax.swing.JMenu();

        Paused.setText("jCheckBox1");

        Canceled.setText("jCheckBox2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(725, 475));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        update.setText("Check for updates");
        update.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                updateMouseReleased(evt);
            }
        });
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        fullclient.setText("Download full client");
        fullclient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                fullclientMouseReleased(evt);
            }
        });
        fullclient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullclientActionPerformed(evt);
            }
        });

        feed.setEditable(false);
        feed.setBorder(null);
        feed.setMinimumSize(new java.awt.Dimension(660, 204));
        jScrollPane2.setViewportView(feed);

        jButton1.setText("Cancel");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton1MouseReleased(evt);
            }
        });

        jButton2.setText("Pause");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton2MouseReleased(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(102, 102, 255));
        jLabel1.setText("MyKiru");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel1MouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel1MouseReleased(evt);
            }
        });

        text.setEditable(false);
        text.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        text.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        text.setMaximumSize(new java.awt.Dimension(900, 170));
        text.setMinimumSize(new java.awt.Dimension(525, 170));
        jScrollPane3.setViewportView(text);

        jMenu1.setText("MyKiru");

        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mykiru/bin/application-settings-icon.png"))); // NOI18N
        jMenuItem3.setText("Settings");
        jMenuItem3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItem3MouseReleased(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mykiru/bin/Actions-application-exit-icon.png"))); // NOI18N
        jMenuItem1.setText("Exit");
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem1MouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItem1MouseReleased(evt);
            }
        });
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        KIRU_VERSION.setText("Version 0.7");
        KIRU_VERSION.setEnabled(false);
        jMenuBar1.add(KIRU_VERSION);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(main_progress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fullclient, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                    .addComponent(update, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(DL_current, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DL_speed, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sub_progress, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addComponent(jScrollPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fullclient, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(main_progress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sub_progress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(DL_speed, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DL_current, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton1)
                                .addComponent(jButton2)))
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        loadFeed();
        jButton2.setEnabled(false);
        jButton1.setEnabled(false);
        if ("".equals(settings.UO_DIR.getText()) || settings.UO_DIR.getText() == null) {
            fs.w(fs.find_message("choose_ultima_dir", lang()), text);
            settings.setVisible(true);
            settings.FindDir();

        }
        update.setText(fs.find_message("check_for_updates", lang()));
        fullclient.setText(fs.find_message("full_client_download", lang()));
        jButton2.setText(fs.find_message("pause_pause", lang()));
        jButton1.setText(fs.find_message("cancel_button", lang()));

    }//GEN-LAST:event_formWindowOpened

    private void fullclientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullclientActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fullclientActionPerformed

    private void jMenuItem1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MouseReleased
        // TODO add your handling code here:
        //fs.w("Exiting MyKiru.", text);
        this.dispose();
    }//GEN-LAST:event_jMenuItem1MouseReleased

    private void jLabel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseReleased
        // TODO add your handling code here:
        //OpenKiru();
    }//GEN-LAST:event_jLabel1MouseReleased

    private void jLabel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseEntered
        // TODO add your handling code here:
        jLabel1.setForeground(new java.awt.Color(0, 0, 153));
    }//GEN-LAST:event_jLabel1MouseEntered

    private void jLabel1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseExited
        // TODO add your handling code here:
        jLabel1.setForeground(new java.awt.Color(102, 102, 255));
    }//GEN-LAST:event_jLabel1MouseExited

    private void fullclientMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fullclientMouseReleased
        // TODO add your handling code here:
        Runnable aRunnable = new Runnable() {
            @Override
            public void run() {

                try {
                    URL game = new URL(update_files + "/UOAU/fullclient.php?active");
                    URLConnection connection = game.openConnection();
                    try (BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
                        String data = "";
                        String inputLine;
                        while ((inputLine = in.readLine()) != null) {
                            data = data + inputLine;
                        }
                        switch (data) {
                            case "false": {
                                fs.w(fs.find_message("full_client_not_offered", lang()), text);
                                break;
                            }
                            case "true": {
                                fs.w(fs.find_message("download_full_client", lang()), text);
                                String[] file_data = fs.full_Client(update_files);
                                if ("FAIL".equals(file_data[0])) {
                                    fs.w(fs.find_message("fullclientfail", lang(), "{Error_Message}", "Error retrieving full client download location."), text);
                                    break;
                                }
                                Downloader file = new mykiru.Downloader();
                                String[] args = {update_files + "/UOAU/" + file_data[1], settings.UO_DIR.getText() + "/" + file_data[1]};
                                JLabel[] labels = {DL_current, DL_speed};
                                JCheckBox[] pc = {Paused, Canceled};
                                try {
                                    onStartDL();
                                    file.main(args, sub_progress, labels, pc);
                                    if (Canceled.isSelected() == true) {
                                        fs.w(fs.find_message("fullclientcancel", lang()), text);
                                        Canceled.setEnabled(false);
                                        Cancel = false;
                                        onFinishDL();
                                        break;
                                    }
                                    fs.w(fs.find_message("install_location", lang()), text);
                                    ExtractFile ex = new mykiru.ExtractFile();
                                    onFinishDL();
                                    if (ex.Extract(args[1], text) == false) {
                                        fs.w(fs.find_message("install_error", lang()), text);
                                    } else {
                                        fs.w(fs.find_message("install_success", lang()), text);
                                    }

                                    if (Paused.isSelected() == true) {
                                        Paused.setSelected(false);
                                        Pause = false;
                                    }
                                    if (Canceled.isSelected() == true) {
                                        fs.w(fs.find_message("fullclientcancel", lang()), text);
                                        Canceled.setEnabled(false);
                                        Cancel = false;
                                    }
                                } catch (Exception ex) {
                                    fs.w(fs.find_message("fullclientfail", lang(), "{Error_Message}", ex.toString()), text);
                                }

                                break;
                            }
                        }
                    }
                } catch (Exception e) {
                    fs.w(fs.find_message("fullclientfail", lang(), "{Error_Message}", e.toString()), text);
                }

            }
        };
        Thread th = new Thread(aRunnable);
        th.start();
    }//GEN-LAST:event_fullclientMouseReleased

    private void jMenuItem3MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem3MouseReleased
        // TODO add your handling code here:
        settings.setVisible(true);
    }//GEN-LAST:event_jMenuItem3MouseReleased

    private void jButton1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseReleased
        // TODO add your handling code here:
        if (Cancel == false) {
            Cancel = true;
            Canceled.setSelected(true);
        } else {
            Cancel = false;
            Canceled.setSelected(false);
        }
    }//GEN-LAST:event_jButton1MouseReleased

    private void jButton2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseReleased
        // TODO add your handling code here:
        if (Pause == false) {
            Pause = true;
            Paused.setSelected(true);
            jButton2.setText(fs.find_message("pause_continue", lang()));
        } else {
            Pause = false;
            Paused.setSelected(false);
            jButton2.setText(fs.find_message("pause_pause", lang()));
        }
    }//GEN-LAST:event_jButton2MouseReleased

    private void updateMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateMouseReleased
        // TODO add your handling code here:

        Runnable aRunnable = new Runnable() {
            @Override
            public void run() {
                onStartDL(false);
                UpdateCheck uc = new UpdateCheck();
                if (uc.Check(update_files, text, KIRU_VERSION) || Skip_Version_Check) {
                    fs.w(fs.find_message("filelist", lang()), text);
                    ArrayList files = fs.GetFiles(update_files);
                    if (files.get(0) != "FAIL") {
                        fs.w(fs.find_message("filecount", lang(), "{File_Count}", fs.inttostring(files.size())), text);
                        main_progress.setMaximum(files.size());
                        main_progress.setValue(0);
                        String fn, hash;
                        for (int i = 0; i < files.size(); i++) {
                            fn = (String) ((ArrayList) files.get(i)).get(0);
                            hash = (String) ((ArrayList) files.get(i)).get(2);
                            System.out.print(fn + "\n");
                            if (fs.allowed(fn, settings.allowed) == false) {
                                fs.w(fs.find_message("notallowed", lang(), "{FileName}", fn), feed);
                                continue;
                            }
                            try {
                                if (fs.hash_is_same(hash, fs.getmd(settings.UO_DIR.getText() + "/" + fn))) {
                                    fs.w(fs.find_message("skipfile", lang(), "{FileName}", fn), text);
                                    continue;
                                } else {
                                    fs.w(fs.find_message("downloadfile", lang(), "{FileName}", fn), text);
                                }
                            } catch (Exception ex) {
                                fs.w(fs.find_message("errordownloadingfile", lang(), "{FileName}", fn).replace("{Error_Message}", ex.toString()), text);
                                continue;
                            }

                            Downloader file = new mykiru.Downloader();
                            String[] args = {update_files + "/UOAU/files/" + fn, settings.UO_DIR.getText() + "/" + fn};
                            JLabel[] labels = {DL_current, DL_speed};
                            JCheckBox[] pc = {Paused, Canceled};
                            //fs.w("Downloading " + fn + "...", text);
                            try {
                                onStartDL();
                                file.main(args, sub_progress, labels, pc);

                                if (pc[1].isSelected()) {
                                    pc[1].setSelected(false);
                                    Cancel = false;
                                    fs.w(fs.find_message("download_canceled", lang(), "{FileName}", fn), text);
                                } else {
                                    fs.w(fs.find_message("downloadsuccess", lang(), "{FileName}", fn), text);
                                }
                                main_progress.setValue(main_progress.getValue() + 1);

                                onFinishDL();

                            } catch (Exception ex) {
                            }

                        }
                    } else {
                        fs.w(fs.find_message("file_list_fail", lang()), text);
                    }
                } else {//fs.w("Returned false", text);

                }
                String[] uod = {settings.UO_DIR.getText()};
                if (settings.Razor.isSelected()) {
                    fs.Start_Program(fs.razorPath, "Razor.exe");
                }
                if (settings.AssistUO.isSelected()) {
                    fs.Start_Program(fs.assistUOPath, "AssistUO.exe");
                }
                if (settings.Client.isSelected()) {
                    fs.Start_Program(uod, "client.exe");
                }
                if (settings.Close.isSelected()) {
                    Close = true;
                }

                onFinishDL(false);
            }
        };
        Thread th = new Thread(aRunnable);
        th.start();

    }//GEN-LAST:event_updateMouseReleased
    private void updateActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    public void onStartDL() {
        jMenu1.setEnabled(false);
        update.setEnabled(false);
        fullclient.setEnabled(false);
        jButton2.setEnabled(true);
        jButton1.setEnabled(true);
    }

    public void onFinishDL() {
        jMenu1.setEnabled(true);
        update.setEnabled(true);
        fullclient.setEnabled(true);
        jButton2.setEnabled(false);
        jButton1.setEnabled(false);
        DL_speed.setText("");
        DL_current.setText("");
    }

    public void onStartDL(boolean e) {
        jMenu1.setEnabled(false);
        update.setEnabled(false);
        fullclient.setEnabled(false);
    }

    public void onFinishDL(boolean e) {
        jMenu1.setEnabled(true);
        update.setEnabled(true);
        fullclient.setEnabled(true);
        DL_speed.setText("");
        DL_current.setText("");
        if (Close) {
            System.exit(0);
            dispose();
            Thread[] tarray = {};
            Thread.enumerate(tarray);
            for (Thread s : tarray) {
                s.interrupt();
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyKiruGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyKiruGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyKiruGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyKiruGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MyKiruGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox Canceled;
    private javax.swing.JLabel DL_current;
    private javax.swing.JLabel DL_speed;
    private javax.swing.JMenu KIRU_VERSION;
    private javax.swing.JCheckBox Paused;
    private javax.swing.JEditorPane feed;
    private javax.swing.JButton fullclient;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JProgressBar main_progress;
    private javax.swing.JProgressBar sub_progress;
    public javax.swing.JTextPane text;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
